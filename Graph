DFS :

# graph represented as a dictionary
graph = {
    'A': ['B', 'C'],
    'B': ['D', 'E'],
    'C': ['F'],
    'D': [],
    'E': ['F'],
    'F': []
}

visited = set()  # set to keep track of visited vertices

def dfs(graph, vertex, visited):
    visited.add(vertex)  # mark the current vertex as visited
    print(vertex, end=' ')

    # recursively visit all the adjacent vertices that haven't been visited yet
    for neighbor in graph[vertex]:
        if neighbor not in visited:
            dfs(graph, neighbor, visited)

# start DFS from vertex 'A'
dfs(graph, 'A', visited)


BFS :

# graph represented as a dictionary
graph = {
    'A': ['B', 'C'],
    'B': ['D', 'E'],
    'C': ['F'],
    'D': [],
    'E': ['F'],
    'F': []
}

visited = set()  # set to keep track of visited vertices
queue = []  # queue to store the vertices to be visited next

def bfs(graph, start, visited):
    visited.add(start)
    queue.append(start)

    while queue:
        vertex = queue.pop(0)
        print(vertex, end=' ')

        for neighbor in graph[vertex]:
            if neighbor not in visited:
                visited.add(neighbor)
                queue.append(neighbor)

# start BFS from vertex 'A'
bfs(graph, 'A', visited)

