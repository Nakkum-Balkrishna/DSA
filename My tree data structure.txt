class Node{
    constructor(data){
        this.data = data
        this.left = null
        this.right = null
    }
}

class BinarySearchTree{
    constructor(){
        this.root = null
    }
    
    insert(data){
        var newNode = new Node(data)
        
        if(this.root == null){
            this.root = newNode
        }
        else{
            this.insertNode(this.root, newNode)
        }
    }
    
    insertNode(head, data){
        
        if(data < head.data){
            if(head.left === null){
                head.left = data
            }else{
                this.insertNode(head.left, data)
            }
        }else{
            if(head.right === null){
                head.right =  data
            }else{
                this.insertNode(head.right, data)
            }
        }
        
    }
    // Performs inorder traversal of a tree
    inorder(node)
    {
        if(node !== null)
        {
            this.inorder(node.left);
            console.log(node.data);
            this.inorder(node.right);
        }
    }
    
    getRootNode()
    {
        return this.root;
    }

}

var BST = new BinarySearchTree();
 
// Inserting nodes to the BinarySearchTree
BST.insert(15);
BST.insert(25);
BST.insert(10);
BST.insert(7);
BST.insert(22);
BST.insert(17);
BST.insert(13);
BST.insert(5);
BST.insert(9);
BST.insert(27);


var root = BST.getRootNode();
// prints 5 7 9 10 13 15 17 22 25 27
BST.inorder(root);


